package se.sundsvall.collaborationroom.modules.blog.beans;

import java.lang.reflect.Field;
import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import se.dosf.communitybase.beans.PostedBean;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.collections.CollectionUtils;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.string.StringUtils;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLUtils;

@Table(name = "communitybase_blog_posts")
@XMLElement
public class Post extends PostedBean implements Comparable<Post> {

	public static final String POST_TAG_TABLE = "communitybase_blog_post_tags";

	public static final Field COMMENTS_RELATION = ReflectionUtils.getField(Post.class, "comments");

	@Key
	@DAOManaged(autoGenerated = true)
	@XMLElement
	private Integer postID;

	@DAOManaged
	@XMLElement
	private Integer sectionID;

	@DAOManaged
	@WebPopulate(required = true, maxLength = 255)
	@XMLElement
	private String title;

	@DAOManaged
	@WebPopulate(required = true, maxLength = 65536)
	@XMLElement
	private String message;

	@DAOManaged
	@OneToMany(autoAdd = true, autoGet = true, autoUpdate = true)
	@SimplifiedRelation(table = POST_TAG_TABLE, remoteValueColumnName = "tag")
	@XMLElement(childName = "tag")
	private List<String> tags;

	@DAOManaged
	@OneToMany(autoAdd = true, autoGet = true, autoUpdate = true)
	@SimplifiedRelation(table = "communitybase_blog_post_followers", remoteValueColumnName = "userID")
	@XMLElement(childName = "userID")
	private List<Integer> followers;

	@DAOManaged
	@OneToMany(autoAdd = true, autoGet = true, autoUpdate = true)
	@SimplifiedRelation(table = "communitybase_blog_post_linked_files", remoteValueColumnName = "fileID")
	@XMLElement(childName = "fileID")
	private List<Integer> linkedFiles;

	@DAOManaged
	@OneToMany
	@XMLElement
	private List<Comment> comments;

	public Integer getPostID() {

		return postID;
	}

	public void setPostID(Integer postID) {

		this.postID = postID;
	}

	public Integer getSectionID() {

		return sectionID;
	}

	public void setSectionID(Integer sectionID) {

		this.sectionID = sectionID;
	}

	public String getTitle() {

		return title;
	}

	public void setTitle(String title) {

		this.title = title;
	}

	public String getMessage() {

		return message;
	}

	public void setMessage(String message) {

		this.message = message;
	}

	public List<String> getTags() {

		return tags;
	}

	public void setTags(List<String> tags) {

		this.tags = tags;
	}

	public List<Integer> getFollowers() {

		return followers;
	}

	public void setFollowers(List<Integer> followers) {

		this.followers = followers;
	}

	public List<Integer> getLinkedFiles() {

		return linkedFiles;
	}

	public void setLinkedFiles(List<Integer> linkedFiles) {

		this.linkedFiles = linkedFiles;
	}

	public List<Comment> getComments() {

		return comments;
	}

	public void setComments(List<Comment> comments) {

		this.comments = comments;
	}

	@Override
	public int hashCode() {

		final int prime = 31;
		int result = 1;
		result = prime * result + ((postID == null) ? 0 : postID.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {

		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		Post other = (Post) obj;
		if (postID == null) {
			if (other.postID != null) {
				return false;
			}
		} else if (!postID.equals(other.postID)) {
			return false;
		}
		return true;
	}

	@Override
	public int compareTo(Post o) {

		return posted.compareTo(o.getPosted()) * -1;
	}

	@Override
	public Element toXML(Document doc) {

		Element element = super.toXML(doc);

		XMLUtils.appendNewElement(doc, element, "commentCount", CollectionUtils.getSize(comments));

		return element;
	}

	@Override
	public String toString() {

		return StringUtils.toLogFormat(title, 30) + " (postID: " + postID + ")";
	}
}
