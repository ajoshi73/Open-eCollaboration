package se.sundsvall.collaborationroom.modules.filearchive.beans;

import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import se.dosf.communitybase.beans.PostedBean;
import se.unlogic.hierarchy.core.beans.User;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.image.ImageUtils;
import se.unlogic.standardutils.io.BinarySizeFormater;
import se.unlogic.standardutils.io.FileUtils;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLUtils;

@Table(name = "communitybase_file_archive_files")
@XMLElement
public class File extends PostedBean implements Comparable<File> {

	public static final Field CATEGORY_RELATION = ReflectionUtils.getField(File.class, "category");

	@DAOManaged(autoGenerated = true)
	@Key
	@XMLElement
	private Integer fileID;

	@DAOManaged
	@XMLElement
	private String filename;

	@DAOManaged
	@XMLElement
	private Long size;

	@DAOManaged
	@XMLElement(name = "lockedBy")
	private User lockedBy;

	@DAOManaged
	@XMLElement
	private Timestamp locked;

	@DAOManaged
	@OneToMany(autoAdd = true, autoGet = true, autoUpdate = true)
	@SimplifiedRelation(table = "communitybase_file_archive_file_tags", remoteValueColumnName = "tag")
	@XMLElement(childName = "tag")
	private List<String> tags;

	@DAOManaged(columnName = "categoryID")
	@ManyToOne
	@XMLElement
	private Category category;
	
	public Integer getFileID() {

		return fileID;
	}

	public void setFileID(Integer fileID) {

		this.fileID = fileID;
	}

	public String getFilename() {

		return filename;
	}

	public void setFilename(String filename) {

		this.filename = filename;
	}

	public Long getSize() {

		return size;
	}

	public void setSize(Long size) {

		this.size = size;
	}

	public User getLockedBy() {

		return lockedBy;
	}

	public void setLockedBy(User lockedBy) {

		this.lockedBy = lockedBy;
	}

	public Timestamp getLocked() {

		return locked;
	}

	public void setLocked(Timestamp locked) {

		this.locked = locked;
	}

	public List<String> getTags() {

		return tags;
	}

	public void setTags(List<String> tags) {

		this.tags = tags;
	}

	public Category getCategory() {

		return category;
	}

	public void setCategory(Category category) {

		this.category = category;
	}

	@Override
	public Element toXML(Document doc) {

		Element fileElement = super.toXML(doc);

		XMLUtils.appendNewElement(doc, fileElement, "FormattedSize", BinarySizeFormater.getFormatedSize(size));
		XMLUtils.appendNewElement(doc, fileElement, "FileExtension", FileUtils.getFileExtension(filename).toUpperCase());
		XMLUtils.appendNewElement(doc, fileElement, "postedInMillis", this.posted.getTime());
		
		if(updated != null) {
			XMLUtils.appendNewElement(doc, fileElement, "updatedInMillis", this.updated.getTime());
		}
		
		if(ImageUtils.isImage(filename)) {
			XMLUtils.appendNewElement(doc, fileElement, "isImage", true);
		}
		
		return fileElement;
	}

	@Override
	public String toString() {

		return this.filename + " (fileID: " + fileID + ")";
	}

	@Override
	public int compareTo(File other) {

		return filename.toLowerCase().compareTo(other.getFilename().toLowerCase());
	}

}
