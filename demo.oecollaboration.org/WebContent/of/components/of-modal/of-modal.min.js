+ function($) {

    'use strict';

    var of_modals = [];

    $(document).ready(function() {

        // Go through all modals and store them in an array. To be able to track errors.
        $('[data-of-modal]').each(function(i, el) {
        	var modal = new OF_Modal(el);
        	of_modals[$(this).data('of-modal')] = modal;
        });
        
        // Bind elements with attribute data-of-open-modal to show their modal
        $(document).on('click', '[data-of-open-modal]', function(e) {
            e.preventDefault();

            var modal = $(this).data('of-open-modal');

            // If modal exists, show it.
            if (typeof of_modals[modal] !== 'undefined') {
                of_modals[modal].show();
                $(window).trigger('resize');
                return;
            }
            
            // Modal is not defined.
            

        }).on('click touchend', '.of-modal-backdrop', function(e) {
            // Hide current modal on click on backdrop, prevent additional events from beeing triggered
            e.preventDefault();
        	e.stopPropagation();
        	of_modals[$(".of-modal.of-visible").data('of-modal')].hide();

        }).on('click touchend', '[data-of-close-modal]', function(e) {
            e.preventDefault();
        	e.stopPropagation();
        	of_modals[$(this).closest(".of-modal").data('of-modal')].hide();

        }).on('keyup', function(e) {
            // Hide modal on ESC-keypress
            var key = e.keyCode ? e.keyCode : e.which;

            if (key === 27) {
            	of_modals[$(this).closest(".of-modal").data('of-modal')].hide();
            }

        });

    });

    var OF_Modal = function(element, options) {

        // Parse options, overwrite default ones with user defined.
        this.parseOptions = function(options) {
            var defaults = {
                fadeDuration: 250
            };

            if (typeof options === 'undefined') {
                return defaults;
            }

            for (var key in options) {
                defaults[key] = options[key];
            }

            // Store current window height.
            defaults.windowHeight = $(window).height();

            return defaults;

        }

        this.visible = false;
        this.backdrop = '.of-modal-backdrop';
        this.$backdrop = $(this.backdrop);
        this.element = element;
        this.$element = $(element);
        this.options = this.parseOptions(options);
        this.hasLoaded = false;

        // Function to show modal
        this.show = function() {

            if (this.visible) {
                return;
            }

            // If modal contains an iframe that have not been initialized yet load it and present it.
            if (this.hasLoaded !== true && typeof this.$element.data('of-modal-iframe') !== 'undefined') {
                var self = this,
                    el = self.$element,
                    iframe = el.find('iframe');

                // Add preloader to modal
                el.ofLoading();
                iframe.attr('src', iframe.data('src'));

                // Wait for iframe contents to load before showing modal
                iframe.on('load', function() {
                    el.ofLoading(false);
                    el.css('top', ((self.options.windowHeight - self.$element.height()) / 2) - 30 + 'px');
                    self.hasLoaded = true;

                    // Hide modal on ESC-keypress inside iframe
                    $(iframe.contents()[0]).on('keyup', function(e) {
                        var key = e.keyCode ? e.keyCode : e.which;

                        if (key === 27)
                            self.hide();

                    });
                });
            }

            if (this.hasLoaded !== true && typeof this.$element.data('of-modal-ajax') !== 'undefined') {
                var self = this,
                    el = self.$element,
                    src = el.data('of-modal-ajax');

                el.ofLoading();

                $.ajax({
                    dataType: 'json',
                    type: 'GET',
                    url: src,
                }).success(function(response, textStatus, request) {

                    

                    if (typeof response !== 'object')
                        return false;

                    for (var i = 0, il = response.metaline.length; i < il; i++) {
                        var button = response.metaline[i];

                        

                    }

                    el.find('header h2').text(response.id);
                    el.find('article').html(response.name);
                    el.css('top', ((self.options.windowHeight - self.$element.height()) / 2) - 30 + 'px');
                    el.ofLoading(false);
                    self.hasLoaded = true;

                });
            }

            this.visible = true;

            // Position modal correctly and fade in, this will be called before iframe.load(), that is why
            // css top will be modified again there.
            this.$element.css('top', ((this.options.windowHeight - this.$element.height()) / 2) - 30 + 'px').addClass('in of-visible');
            this.$backdrop.addClass('in of-visible');

            // Add class to body to prevent scrolling through modal
            $('body').addClass('of-modal-active');

            // If modal has inputs, request focus.
            // this.$element.find('input[type="text"]').first().focus();

            // TODO: Load modal content with ajax request.
            // If ajax is performed, show preloader before opening modal.
            // var el = this.$element;
            // el.ofLoading();

            // setTimeout(function() {
            //     el.ofLoading(false);
            //     $(window).trigger('resize');
            // }, 750);

        }

        // Function to hide modal
        this.hide = function() {

            var backdrop = this.$backdrop,
                element = this.$element;

            if (!this.visible) {
                return;
            }

            this.visible = false;

            // Remove class of-visible first to fade out
            element.removeClass('of-visible');
            backdrop.removeClass('of-visible');
            $('body').removeClass('of-modal-active');

            // Timed out removal of classes to maintain transition's from CSS
            setTimeout(function() {
                element.removeClass('in');
                backdrop.removeClass('in');
            }, this.options.fadeDuration);
        }

        // Toggle function, uses already defined show/hide functions
        this.toggle = function() {

            if (this.visible !== true) {
                this.show();
            } else {
                this.hide();
            }

            return;

        }

        // Event handlers
        this.bindUiActions = function() {

            var self = this;

            // Reposition modal to be centered on window resize.
            $(window).resize(function() {

                // Store new windowo height
                self.options.windowHeight = $(window).height();
                var top = ((self.options.windowHeight - self.$element.height()) - 30) / 2 + 'px';

                // If the element's position is too high append scroll inside.
                if (parseFloat(top) > 29) {
                    self.$element.addClass('of-modal-overflow');
                } else {
                    self.$element.removeClass('of-modal-overflow');
                }

                self.$element.css('top', parseFloat(top) + 'px');

            });


        }

        this.bindUiActions();
    };
}(jQuery);