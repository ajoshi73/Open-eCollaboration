(function(o) {

    o.timestart,
    o.timeend;

    o.elementRegions = function() {

        var self = this;

        this.breakpoints = new Array();
        this.breakpointElements = new Array();

        this.moveableElements = {};
        this.previousBreakpoint = 0;
        this.currentBreakpoint = 0;
        this.nextBreakpoint = 0;
        this.timer = false;

        this.initialize = function() {

            o.timestart = new Date().getTime();

            var sources = o.document.getElementsByTagName('span'),
                width = o.innerWidth;

            for (var i = 0, il = sources.length; i < il; i++) {
                var el = sources[i];

                if (el.getAttribute('data-origin') === null && el.getAttribute('data-destination') === null)
                    continue;


                if (el.getAttribute('data-breakpoint') !== null && this.breakpoints.indexOf(parseInt(el.getAttribute('data-breakpoint'))) === -1) {
                    this.breakpoints.push(parseInt(el.getAttribute('data-breakpoint')));
                    this.breakpointElements['b' + el.getAttribute('data-breakpoint')] = new Array();
                }

                if (el.getAttribute('data-origin') !== null) {
                    if (typeof this.moveableElements[el.getAttribute('data-origin')] === 'undefined') {
                        this.moveableElements[el.getAttribute('data-origin')] = {};
                    }
                    this.breakpointElements['b' + el.getAttribute('data-breakpoint')].push(el.getAttribute('data-origin'));

                    this.moveableElements[el.getAttribute('data-origin')].origin = el;
                } else if (el.getAttribute('data-destination') !== null) {
                    if (typeof this.moveableElements[el.getAttribute('data-destination')] === 'undefined') {
                        this.moveableElements[el.getAttribute('data-destination')] = {};
                    }

                    this.moveableElements[el.getAttribute('data-destination')].destination = el;
                }

            }

            this.breakpoints.sort(function(a, b) {
                return b - a;
            });

            var bps = this.breakpoints;


            for (var i = 0, il = bps.length; i < il; i++) {
                if (width >= bps[i]) {
                    this.nextBreakpoint = typeof bps[i - 1] !== 'undefined' ? bps[i - 1] : false;
                    this.currentBreakpoint = bps[i];
                    this.previousBreakpoint = typeof bps[i + 1] !== 'undefined' ? bps[i + 1] : false;
                    break;
                }
            }

            if (this.nextBreakpoint == this.currentBreakpoint == this.previousBreakpoint == 0) {
                this.nextBreakpoint = bps[0];
            }

            for (bp in bps) {

                if ((width >= bps[bp])) {


                    self.handleTransitions(bps[bp]);
                }
            }

            self.calculate();
        };

        this.calculate = function() {

            var width = window.innerWidth,
                bps = self.breakpoints;

            if (width < self.currentBreakpoint) {

                // 

                var tmp = self.currentBreakpoint;
                self.currentBreakpoint = self.previousBreakpoint;

                if (typeof self.breakpointElements['b' + tmp] !== 'undefined')
                    self.handleTransitions(tmp, true);

                self.nextBreakpoint = tmp;

                bpIndex = bps.indexOf(self.currentBreakpoint);

                self.previousBreakpoint = typeof bps[bpIndex + 1] !== 'undefined' ? bps[bpIndex + 1] : false;
                return;
            }

            if (width >= (self.nextBreakpoint || 9999)) {

                var tmp = self.currentBreakpoint;
                self.currentBreakpoint = self.nextBreakpoint;

                if (typeof self.breakpointElements['b' + self.currentBreakpoint] !== 'undefined')
                    self.handleTransitions(self.currentBreakpoint);

                self.previousBreakpoint = tmp;

                bpIndex = bps.indexOf(self.currentBreakpoint);

                self.nextBreakpoint = typeof bps[bpIndex - 1] !== 'undefined' ? bps[bpIndex - 1] : false;
                return;
            }

            clearTimeout(self.timer);
            self.timer = setTimeout(self.calculate, 100);

        };

        this.handleTransitions = function(breakpoint, toOrigin) {

            // 
            toOrigin = typeof toOrigin !== 'undefined' ? toOrigin : false;
            var elementsToHandle = self.breakpointElements['b' + breakpoint],
                direction = (toOrigin !== false) ? 'origin' : 'destination',
                other = (toOrigin !== false) ? 'destination' : 'origin';

            for (var i = 0, il = elementsToHandle.length; i < il; i++) {
                var elIndex = elementsToHandle[i],
                    html = this.moveableElements[elIndex][other].innerHTML;


                this.moveableElements[elIndex][other].innerHTML = '';
                this.moveableElements[elIndex][direction].innerHTML = html;

                // 

            }

            o.timeend = new Date().getTime();

            

        };

    };

    o.oer = new o.elementRegions();

    if (o.addEventListener) {

        o.addEventListener("resize", o.oer.calculate, false);
        o.addEventListener("DOMContentLoaded", function() {
            o.oer.initialize();
            // Run once only
            o.removeEventListener("load", o.oer.initialize, false);

        }, false);

        o.addEventListener("load", o.oer.initialize, false);
    } else if (o.attachEvent) {
        o.attachEvent("onload", o.oer.initialize);
    }
}(this));









// // + function($) {

// //     'use strict ';

// //     $(document).ready(function() {

// //         var ofer = new OF_ElementRegions();

// //         ofer.calculate(true);

// //     });

// //     var OF_ElementRegions = function() {


// //         this.options = {
// //             breakpoints: {
// //                 bb: 576
// //             },
// //             biggestBreakpoint: 0
// //         }

// //         this.elements = {}

// //         this.currentBreakpoint = 0;

// //         this.setBiggestBreakpoint = function() {

// //             var bps = this.breakpoints,
// //                 b = this.options.biggestBreakpoint,
// //                 width = $(window).width();

// //             for (var bp in bps) {

// //                 // Set the highest value as biggestBreakpoint
// //                 if (bps[bp] > b) {
// //                     b = bps[bp];
// //                 }

// //                 // Set the largest breakpoint smaller than window width as current.
// //                 if (bps[bp] <= width && bps[bp] > this.currentBreakpoint) {
// //                     this.currentBreakpoint = bps[bp];
// //                 }

// //             }

// //             this.options.biggestBreakpoint = b;
// //             
// //         };

// //         this.findMoveableElements = function() {

// //             var self = this;

// //             $(' [data - move]
// ').each(function(i, el) {

// //                 var $el = $(el),
// //                     breakpoint = $el.attr('
// data - move ');

// //                 // If no elements exist under the designated breakpoint, make a new array of it.
// //                 if (typeof self.elements[breakpoint] === '
// undefined ') {
// //                     var tmp = new Array();

// //                     tmp.push($el);

// //                     self.elements[breakpoint] = tmp;

// //                     // Go to next element.
// //                     return true;
// //                 }

// //                 self.elements[breakpoint].push($el);

// //             });

// //             // 

// //         }

// //         this.calculate = function(initial) {

// //             initial = typeof initial === '
// undefined ' ? false : initial;

// //             

// //             if (initial !== true && this.currentBreakpoint === this.options.biggestBreakpoint) {
// //                 return;
// //             }

// //             var width = $(window).width(),
// //                 bps = this.breakpoints;


// //             for (var bp in bps) {

// //                 if (width >= bps[bp]) {
// //                     
// //                 }

// //             }

// //         }

// //         this.bindUiActions = function() {

// //             var self = this;

// //             $(window).on('
// resize ', function() {
// //                 self.calculate();
// //             });

// //         }

// //         this.setBiggestBreakpoint();
// //         this.findMoveableElements();
// //         this.bindUiActions();

// //     };

// // }(jQuery);